https://medium.com/@maneesha.wijesinghe1/what-happens-when-you-type-an-url-in-the-browser-and-press-enter-bb0aa2449c1a

DNS = Domain Name Server - key value pair tanslates URL to ip address of server
key = URL
value = IP address of application server

To find the DNS record, the browser checks four caches.
? First, it checks the browser cache. The browser maintains a repository of DNS records for a fixed duration for websites you have previously 
visited. So, it is the first place to run a DNS query.
? Second, the browser checks the OS cache. If it is not in the browser cache, the browser will make a system call (i.e., gethostname on 
Windows) to your underlying computer OS to fetch the record since the OS also maintains a cache of DNS records.
? Third, it checks the router cache. If it’s not on your computer, the browser will communicate with the router that maintains its’ own cache 
of DNS records.
? Fourth, it checks the ISP cache. If all steps fail, the browser will move on to the ISP. Your ISP maintains its’ own DNS server, which 
includes a cache of DNS records, which the browser would check with the last hope of finding your requested URL.

If the requested URL is not in the cache, ISP’s DNS server initiates a DNS query to find the IP address of the server that hosts application
The purpose of a DNS query is to search multiple DNS servers on the internet until it finds the correct IP address for the website. This type 
of search is called a recursive search since the search will repeatedly continue from a DNS server to a DNS server until it either finds the IP 
address we need or returns an error response saying it was unable to find it.

In this situation, we would call the ISP’s DNS server a DNS recursor whose responsibility is to find the proper IP address of the intended 
domain name by asking other DNS servers on the internet for an answer. The other DNS servers are called name servers since they perform a DNS 
search based on the domain architecture of the website domain name.

root domain -> "."
top-level domain -> "edu" "org" "gov" "com" "au"
second-level domain -> "openoffice.org" "expedia.gov" "microsoft.com" "congress.au"
third-level domain -> "www.expedia.gov" "download.microsoft.com" "sales.microsoft.org"

Many website URLs we encounter today contain a third-level domain, a second-level domain, and a top-level domain. Each of these levels 
contains their own name server, which is queried during the DNS lookup process.

For maps.google.com, first, the DNS recursor will contact the root name server. 
The root name server will redirect it to the .com domain name server. 
.com name server will redirect it to the google.com name server. 
The google.com name server will find the matching IP address for maps.google.com in its’ DNS records and return it to your DNS recursor, 
which will send it back to your browser.


1. You type maps.google.com into the address bar of your browser.
2. The browser checks the cache for a DNS record to find the corresponding IP address of maps.google.com.
	Browser cache -> OS cache -> Router cache -> ISP cache 
3. If the requested URL is not in the cache, ISP’s DNS server initiates a DNS query to find the IP address of the server that hosts 
maps.google.com.
	ISP cache does not have so initiates a recursive DNS query based on root and domain in URL
4. The browser initiates a TCP connection with the server.
	established using a process called the TCP/IP three-way handshake
	1. The client machine sends a SYN packet to the server over the internet, asking if it is open for new connections.
	2. If the server has open ports that can accept and initiate new connections, it’ll respond with an ACKnowledgment of the SYN packet 
	using a SYN/ACK packet.
	3. The client will receive the SYN/ACK packet from the server and will acknowledge it by sending an ACK packet.
5. The browser sends an HTTP request to the webserver.
	sample GET or POST request with browser identification (User-Agent header), types of requests that it will accept (Accept header), and 
	connection headers asking it to keep the TCP connection alive for additional requests. It will also pass information taken from cookies 
	the browser has in store for this domain.
6. The server handles the request and sends back a response.
	The server contains a webserver (i.e., Apache, IIS) that receives the request from the browser and passes it to a request handler to read 
	and generate a response. The request handler is a program (written in ASP.NET, PHP, Ruby, etc.) that reads the request, its’ headers, and 
	cookies to check what is being requested and also update the information on the server if needed. Then it will assemble a response in a 
	particular format (JSON, XML, HTML).
7. The server sends out an HTTP response.
	The server response contains the web page you requested as well as the status code, compression type (Content-Encoding), how to cache the 
	page (Cache-Control), any cookies to set, privacy information, etc.
	? 1xx indicates an informational message only
	? 2xx indicates success of some kind
	? 3xx redirects the client to another URL
	? 4xx indicates an error on the client’s part
	? 5xx indicates an error on the server’s part
8. The browser displays the HTML content (for HTML responses, which is the most common).
	The browser displays the HTML content in phases. First, it will render the bare bone HTML skeleton. Then it will check the HTML tags and 
	send out GET requests for additional elements on the web page, such as images, CSS stylesheets, JavaScript files, etc. These static files 
	are cached by the browser, so it doesn’t have to fetch them again the next time you visit the page. In the end, you’ll see 
	maps.google.com appearing on your browser.s`


https://dev.to/antonfrattaroli/what-happens-when-you-type-googlecom-into-a-browser-and-press-enter-39g8
descripting low level networking and response html css cookies and sniffing


When a pc boots up it obtains its own IP address, IP address of DNS server and Default gateway and subnet block using DHCP (Dynamic Host 
Control Protocol).
To send DNS query for name-to-IP address translation of requested web page, it requires MAC address of Default router, and for this it uses 
Address Resolution Protocol (ARP) and obtains physical Address of the default gateway router.
Then sends DNS query to the DNS server, which replies back with DNS response with the IP address of requested web page, that is cached into 
the forwarding table.
Now the client creates a TCP socket to interact with the web server and sends a tcp sync message. Server replies back with tcp sync ack 
message.
Now we can move ahead with HTTP get message, and the server will respond back with HTTP response.


https://github.com/alex/what-happens-when
actual deep dive to all layers

https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2008-R2-and-2008/dd197427(v=ws.10)








