simple search techniques below -

1. Linear Search		-- O(n)
10,20,80,30,60,50,110,100,130,170
start searching from left side of array towards right side till you find element searching for or arrive at end of array.
worst case time complexity: O(n)


2. Binary Search		-- O(log to base 2 of n)
2,5,8,12,16,23,38,56,72,91
binary search takes advantage of fact that given array is sorted.
always start at middle of array, if element searching for is greater than middle element then in next iteration try to find in right side subarray,
or if element to search for is smaller than target left side sub array.
In this if finding for 23, middle is 16 - so look in right sub array.
in next ietration middle is 56, so look in left sub array from 23 to 38
finds in this iteration.
Since array is divided in half everytime, worst case time complexity is O(log n)
Binary search: Search a sorted array by repeatedly dividing search interval in half.
Above recurrence can be solved by Recurrencu Tree method or by Case 2 of Master Method and solution is Theta (log n)


3.Jump Search			-- O(square root of n) 
idea is to check fewer elements than linear search by jumping ahead by fixed steps.
Best jum size is square root of n, works only on sorted array,
time complexity is somewhere between linear search O(n) and binary search O(log n)
Jump search has advantage over binary search that we need to travese back only once, so in system where jumping back is expensive operation, we use jump seach.
0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610
length of array is 16, so jump size = square root of 16 = 4
step 1: 0 jump to 4 : 2 is smaller than 55 so next jump
step 2: 4 jump to 8 : 13 is smaller than 55 so next jump
step 3: 8 jump to 12 : 89 is greater than 55 so start linear search from last jump index till present to find 55 in between


4. Interpolation Search		--avg O(log (log n))  worst case O(n)
Interpolation search is improvement over binary search where values in sorted array are uniformly distributed.
Binary search goes to middle element but interpolation search goes to different location according to value of key being searched.
pos to search = LeftIndex + ( (RightIndex - LeftIndex) * (XbeingSearched - array[LeftIndex]) / (array[RightIndex] - array[LeftIndex]) )
if elements are uniformly distributed then O(log (log n)) else worst case O(n)


5. Exponential Search
Unbounded search for online stream of data
double size of search array i = i * 2 eveytime and then do binary search between i/2 and i.
works better for array of infinte size or when search element is closer to first element.


   