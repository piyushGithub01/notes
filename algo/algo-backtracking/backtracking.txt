https://www.geeksforgeeks.org/backtracking-introduction/
https://www.geeksforgeeks.org/backtracking-algorithms/
https://www.geeksforgeeks.org/top-20-backtracking-algorithm-interview-questions/



Backtracking can be defined as a general algorithmic technique that considers searching every possible combination in order to solve a computational problem.


Backtracking is an algorithmic-technique for solving problems recursively by trying to build a solution incrementally, one piece at a time, removing those solutions that fail to satisfy the constraints of the problem at any point of time (by time, here, is referred to the time elapsed till reaching any level of the search tree)


There are three types of problems in backtracking –

Decision Problem – In this, we search for a feasible solution.
Optimization Problem – In this, we search for the best solution.
Enumeration Problem – In this, we find all feasible solutions.



Generally, every constraint satisfaction problem which has clear and well-defined constraints on any objective solution, that incrementally builds candidate to the solution and abandons a candidate (“backtracks”) as soon as it determines that the candidate cannot possibly be completed to a valid solution, can be solved by Backtracking.

However, most of the problems that are discussed, can be solved using other known algorithms like Dynamic Programming or Greedy Algorithms in logarithmic, linear, linear-logarithmic time complexity in order of input size, and therefore, outshine the backtracking algorithm in every respect (since backtracking algorithms are generally exponential in both time and space).

However, a few problems still remain, that only have backtracking algorithms to solve them until now.


Problems which are typically solved using backtracking technique have following property in common. These problems can only be solved by trying every possible configuration and each configuration is tried only once. A Naive solution for these problems is to try all configurations and output a configuration that follows given problem constraints.

Backtracking works in incremental way and is an optimization over the Naive solution where all possible configurations are generated and tried.





/* Java program to solve N Queen Problem using 
   backtracking */
public class NQueenProblem { 
    final int N = 4; 
  
    /* A utility function to print solution */
    void printSolution(int board[][]) 
    { 
        for (int i = 0; i < N; i++) { 
            for (int j = 0; j < N; j++) 
                System.out.print(" " + board[i][j] 
                                 + " "); 
            System.out.println(); 
        } 
    } 
  
    /* A utility function to check if a queen can 
       be placed on board[row][col]. Note that this 
       function is called when "col" queens are already 
       placeed in columns from 0 to col -1. So we need 
       to check only left side for attacking queens */
    boolean isSafe(int board[][], int row, int col) 
    { 
        int i, j; 
  
        /* Check this row on left side */
        for (i = 0; i < col; i++) 
            if (board[row][i] == 1) 
                return false; 
  
        /* Check upper diagonal on left side */
        for (i = row, j = col; i >= 0 && j >= 0; i--, j--) 
            if (board[i][j] == 1) 
                return false; 
  
        /* Check lower diagonal on left side */
        for (i = row, j = col; j >= 0 && i < N; i++, j--) 
            if (board[i][j] == 1) 
                return false; 
  
        return true; 
    } 
  
    /* A recursive utility function to solve N 
       Queen problem */
    boolean solveNQUtil(int board[][], int col) 
    { 
        /* base case: If all queens are placed 
           then return true */
        if (col >= N) 
            return true; 
  
        /* Consider this column and try placing 
           this queen in all rows one by one */
        for (int i = 0; i < N; i++) { 
            /* Check if the queen can be placed on 
               board[i][col] */
            if (isSafe(board, i, col)) { 
                /* Place this queen in board[i][col] */
                board[i][col] = 1; 
  
                /* recur to place rest of the queens */
                if (solveNQUtil(board, col + 1) == true) 
                    return true; 
  
                /* If placing queen in board[i][col] 
                   doesn't lead to a solution then 
                   remove queen from board[i][col] */
                board[i][col] = 0; // BACKTRACK 
            } 
        } 
  
        /* If the queen can not be placed in any row in 
           this colum col, then return false */
        return false; 
    } 
  
    /* This function solves the N Queen problem using 
       Backtracking.  It mainly uses solveNQUtil () to 
       solve the problem. It returns false if queens 
       cannot be placed, otherwise, return true and 
       prints placement of queens in the form of 1s. 
       Please note that there may be more than one 
       solutions, this function prints one of the 
       feasible solutions.*/
    boolean solveNQ() 
    { 
        int board[][] = { { 0, 0, 0, 0 }, 
                          { 0, 0, 0, 0 }, 
                          { 0, 0, 0, 0 }, 
                          { 0, 0, 0, 0 } }; 
  
        if (solveNQUtil(board, 0) == false) { 
            System.out.print("Solution does not exist"); 
            return false; 
        } 
  
        printSolution(board); 
        return true; 
    } 
  
    // driver program to test above function 
    public static void main(String args[]) 
    { 
        NQueenProblem Queen = new NQueenProblem(); 
        Queen.solveNQ(); 
    } 
} 


