SOLID
SRP – Single Responsibility Principle
The Single Responsibility Principle (SRP) states that a class should have only one reason to  SingleResponsibilitychange.  It was first cited in this form by Robert C. Martin in an article that later formed a chapter in his Principles, Patterns, and Practices of Agile Software Development book.
The Single Responsibility Principle is closely related to the concepts of coupling and cohesion
If a class has poor cohesion, some part of it may change that only certain depending classes utilize, while the rest of it may remain unchanged.  Nonetheless, classes that depend on the class must all be retested as a result of the change, increasing the total surface area of the application that is affected by the change.  If instead the class were broken up into several, highly cohesive classes, each would be used by fewer other elements of the system, and so a change to any one of them would have a lesser impact on the total system.

Martin suggests that we define each responsibility of a class as a reason for change.  If you can think of more than one motivation for changing a class, it probably has more than one responsibility.  When these axes of change occur, the class will probably need to have different aspects of its behavior changed, at different times and for different reasons.  However, like other principles, it’s unwise to try and apply SRP to everything from the outset.  If a particular class is stable and isn’t causing needless pain as a result of changes, there is little need to change it. Practice Pain Driven Development.

Some examples of responsibilities to consider that may need to be separated include:

Persistence
Validation
Notification
Error Handling
Logging
Class Selection / Instantiation
Formatting
Parsing
Mapping




OCP – Open/Closed Principle
The Open-Closed Principle (OCP) states that software entities (classes, modules, methods, etc.) 
should be open for extension, but closed for modification
In practice, this means creating software entities whose behavior can be changed without the need to edit and recompile the code itself. The simplest way to demonstrate this principle is to consider a method that does one thing. Let’s say it writes to a particular file, the name of which is hard-coded into the method. If the requirements change, and the filename now needs to be different in certain situations, we must open up the method to change the filename. If, on the other hand, the filename had been passed in as a parameter, we would be able to modify the behavior of this method without changing its source, keeping it closed to modification.

The Open-Closed Principle can also be achieved in many other ways, including through the use of inheritance or through compositional design patterns like the Strategy pattern.
Inheritance may be the most popular way to implement the Open-Closed Principle but it is not the only one. 




LSP – Liskov Substitution Principle

http://deviq.com/liskov-substitution-principle/

The Liskov Substitution Principle (LSP) states that subtypes must be substitutable for their base types. When this principle is violated, 
it tends to result in a lot of extra conditional logic scattered throughout the application, checking to see the specific type of an object. 
This duplicate, scattered code becomes a breeding ground for bugs as the application grows.

If a given interface has more features than you require, follow the Interface Segregation Principle and create a new interface that includes 
only the functionality your client code requires, and which you can implement fully.

A common code smell that frequently indicates an LSP violation is the presence of type checking code within a code block that should be 
polymorphic. For instance, if you have a foreach loop over a collection of objects of type Foo, and within this loop there is a check to 
see if Foo is in fact Bar (subtype of Foo), then this is almost certainly an LSP violation. If instead you ensure Bar is in all ways 
substitutable for Foo, there should be no need to include such a check.




ISP – Interface Segregation Principle
The Interface Segregation Principle (ISP) states that clients should not be forced to depend on methods that they do not use.  
Interfaces should belong to clients, not to libraries or hierarchies. Application developers should favor thin, focused interfaces to 
“fat” interfaces that offer more functionality than a particular class or method needs.

Another benefit of smaller interfaces is that they are easier to implement fully, and thus less likely to break the Liskov Substitution 
Principle by being only partially implemented. They also provide greater flexibility in how you implement functionality, since parts of a 
larger interface can be implemented in different ways




DIP – Dependency Inversion Principle
The Dependency Inversion Principle (DIP) states that high level modules should not depend on low level modules; both should depend on 
abstractions. Abstractions should not depend on details.  Details should depend upon abstractions.

Solution will be similar to what Spring provides

Consider a user interface form with a button. When the button is clicked, an event is fired. In response to the event, 
a private member of the form, whose type is simply an interface, has one of its methods called. The ‘new’ keyword is nowhere to be found 
in the click event handler. The implementation of the interface is provided when the form is created, through a process known as Dependency 
Injection. Likewise, if this method is providing key business logic, but also requires access to the system’s persistence layer, it, too may 
specify (explicitly in its constructor) one or more interfaces that it depends on, which may include implementations of the Repository 
pattern. No static method calls or ‘new’ keywords will exist in the business logic class’s method, either.

