I. Codebase
One codebase tracked in revision control, many deploys

II. Dependencies
Explicitly declare and isolate dependencies
A twelve-factor app never relies on implicit existence of system-wide packages. It declares all dependencies, completely and exactly, via a 
dependency declaration manifest.


III. Config
Store config in the environment
Apps sometimes store config as constants in the code. This is a violation of twelve-factor, which requires strict separation of config from 
code. Config varies substantially across deploys, code does not.


IV. Backing services
Treat backing services as attached resources
A backing service is any service the app consumes over the network as part of its normal operation. Examples include datastores (such as 
MySQL or CouchDB), messaging/queueing systems (such as RabbitMQ or Beanstalkd), SMTP services for outbound email (such as Postfix), and 
caching systems (such as Memcached).
The code for a twelve-factor app makes no distinction between local and third party services. To the app, both are attached resources, 
accessed via a URL or other locator/credentials stored in the config. A deploy of the twelve-factor app should be able to swap out a local 
MySQL database with one managed by a third party (such as Amazon RDS) without any changes to the app’s code.
Resources can be attached to and detached from deploys at will. For example, if the app’s database is misbehaving due to a hardware issue, 
the app’s administrator might spin up a new database server restored from a recent backup. The current production database could be detached, 
and the new database attached – all without any code changes.


V. Build, release, run
Strictly separate build and run stages
A codebase is transformed into a (non-development) deploy through three stages:
The build stage is a transform which converts a code repo into an executable bundle known as a build. Using a version of the code at a commit 
specified by the deployment process, the build stage fetches vendors dependencies and compiles binaries and assets.
The release stage takes the build produced by the build stage and combines it with the deploy’s current config. The resulting release contains 
both the build and the config and is ready for immediate execution in the execution environment.
The run stage (also known as “runtime”) runs the app in the execution environment, by launching some set of the app’s processes against a 
selected release.
The twelve-factor app uses strict separation between the build, release, and run stages.



VI. Processes
Execute the app as one or more stateless processes
Twelve-factor processes are stateless and share-nothing. Any data that needs to persist must be stored in a stateful backing service, 
typically a database.


VII. Port binding
Export services via port binding
Web apps are sometimes executed inside a webserver container. For example, PHP apps might run as a module inside Apache HTTPD, or Java apps 
might run inside Tomcat.
The twelve-factor app is completely self-contained and does not rely on runtime injection of a webserver into the execution environment to 
create a web-facing service. The web app exports HTTP as a service by binding to a port, and listening to requests coming in on that port.
This is typically implemented by using dependency declaration to add a webserver library to the app, such as Tornado for Python, Thin for 
Ruby, or Jetty for Java and other JVM-based languages. This happens entirely in user space, that is, within the app’s code. The contract with 
the execution environment is binding to a port to serve requests.




VIII. Concurrency
Scale out via the process model
In the twelve-factor app, processes are a first class citizen.
The process model truly shines when it comes time to scale out. The share-nothing, horizontally partitionable nature of twelve-factor app 
processes means that adding more concurrency is a simple and reliable operation. The array of process types and number of processes of each 
type is known as the process formation.


IX. Disposability
Maximize robustness with fast startup and graceful shutdown
The twelve-factor app’s processes are disposable, meaning they can be started or stopped at a moment’s notice. This facilitates fast elastic 
scaling, rapid deployment of code or config changes, and robustness of production deploys.

Processes should strive to minimize startup time. Ideally, a process takes a few seconds from the time the launch command is executed until 
the process is up and ready to receive requests or jobs. Short startup time provides more agility for the release process and scaling up; and 
it aids robustness, because the process manager can more easily move processes to new physical machines when warranted.

Processes shut down gracefully when they receive a SIGTERM signal from the process manager. For a web process, graceful shutdown is achieved 
by ceasing to listen on the service port (thereby refusing any new requests), allowing any current requests to finish, and then exiting. 
Implicit in this model is that HTTP requests are short (no more than a few seconds), or in the case of long polling, the client should 
seamlessly attempt to reconnect when the connection is lost.

For a worker process, graceful shutdown is achieved by returning the current job to the work queue. For example, on RabbitMQ the worker can 
send a NACK; on Beanstalkd, the job is returned to the queue automatically whenever a worker disconnects. Lock-based systems such as Delayed 
Job need to be sure to release their lock on the job record. Implicit in this model is that all jobs are reentrant, which typically is 
achieved by wrapping the results in a transaction, or making the operation idempotent.



X. Dev/prod parity
Keep development, staging, and production as similar as possible
The twelve-factor developer resists the urge to use different backing services between development and production, even when adapters 
theoretically abstract away any differences in backing services. Differences between backing services mean that tiny incompatibilities crop 
up, causing code that worked and passed tests in development or staging to fail in production. These types of errors create friction that 
disincentivizes continuous deployment. The cost of this friction and the subsequent dampening of continuous deployment is extremely high when 
considered in aggregate over the lifetime of an application.



XI. Logs
Treat logs as event streams
A twelve-factor app never concerns itself with routing or storage of its output stream. It should not attempt to write to or manage logfiles. 
Instead, each running process writes its event stream, unbuffered, to stdout. During local development, the developer will view this stream 
in the foreground of their terminal to observe the app’s behavior.

In staging or production deploys, each process’ stream will be captured by the execution environment, collated together with all other 
streams from the app, and routed to one or more final destinations for viewing and long-term archival. These archival destinations are not 
visible to or configurable by the app, and instead are completely managed by the execution environment. Open-source log routers (such as 
Logplex and Fluentd) are available for this purpose.

The event stream for an app can be routed to a file, or watched via realtime tail in a terminal. Most significantly, the stream can be sent 
to a log indexing and analysis system such as Splunk, or a general-purpose data warehousing system such as Hadoop/Hive. 





XII. Admin processes
Run admin/management tasks as one-off processes
The process formation is the array of processes that are used to do the app’s regular business (such as handling web requests) as it runs. 
Separately, developers will often wish to do one-off administrative or maintenance tasks for the app, such as:

Running database migrations (e.g. manage.py migrate in Django, rake db:migrate in Rails).
Running a console (also known as a REPL shell) to run arbitrary code or inspect the app’s models against the live database. Most languages 
provide a REPL by running the interpreter without any arguments (e.g. python or perl) or in some cases have a separate command (e.g. irb for 
Ruby, rails console for Rails).
Running one-time scripts committed into the app’s repo (e.g. php scripts/fix_bad_records.php).










